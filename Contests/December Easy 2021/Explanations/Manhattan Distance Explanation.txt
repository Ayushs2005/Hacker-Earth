First of all, let us notice that X and Y are independent. 
So, let us discuss the problem of finding the sum of Manhattan distances for one dimension. 

There are N^2 pairs but only N terms so let us count the contribution of each X_i 

Suppose X_1 < X_2 < ... < X_i < ... < X_n 

X_i will be added when it is paired with any of the first (i - 1) terms 
X_i will be subtracted when it is paired with any of the later (n - i) terms 

So X_i is counted totally [(i - 1) - (n - i)] times. 

Answer = sum[ (i - 1) - (n - i) ] X_i 

-----

long long calculate(vector <long long> &A, int no_of_elements)
{
	sort(A.begin(), A.end());

	long long sum = 0; 
	for(int i = 1; i <= no_of_elements; i++)
	{
		long long before_contribution = (i - 1)*A[i]; 
		long long after_contribution = (no_of_elements - i)*A[i];

		sum += (before_contribution - after_contribution);
	}

	return sum;
}

void solve()
{
	int no_of_points; 
	cin >> no_of_points; 

	vector <long long> X(no_of_points + 1), Y(no_of_points + 1);
	for(int i = 1; i <= no_of_points; i++)
	{
		cin >> X[i] >> Y[i];
	}

	long long x_answer = calculate(X, no_of_points), y_answer = calculate(Y, no_of_points);
	long long answer = x_answer + y_answer; 

	cout << answer << "\n";
}
